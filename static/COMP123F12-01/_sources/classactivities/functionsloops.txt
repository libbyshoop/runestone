**COMP 123**

Overview
========

These activities will practice with writing functions, both in
plain Python and using Myro, and will introduce loops, both ``while``
and ``for`` loops, which are a way of making the computer repeat a
set of actions over and over.

Plain Python
============

Open a new window in IDLE, and put all your work for this activity
in the file.


#. Read the following function, and then predict what the values
   would be when the function calls below are run. Then test yourself
   by typing the function into IDLE and trying out the examples.

   .. sourcecode:: python

       def foo(x, y, z):
            q = max(x, y)
            r = max(y, z)
            s = max(x, z)
            return min(q, r, s)
       print foo(10, 15, 17)
       print foo(15, 10, 17)
       print foo(17, 10, 15)
       print foo(10, 10, 20)
       print foo(10, 20, 10)

   .. activecode:: ch03_1

        def foo(x, y, z):
            q = max(x, y)
            r = max(y, z)
            s = max(x, z)
            return min(q, r, s)


#. Consider the mathematical polynomial function:
   :math:`f(x) = 3x^2 + 2x+ 1`.
   Create a function in Python
   called ``polyf`` that takes a single input, ``x``, and computes this
   polynomial value, and ``returns`` it.

   Once you have defined the function, it should behave as in the
   following examples:

   .. sourcecode:: python

       >>> polyf(1)
        6
       >>> polyf(10)
       321
       >>> polyf(1) + polyf(10)
       327

   .. actex:: ch03_2


#. Define a ``truncString`` function that takes a string as input,
   and returns a new string that contains only the first five
   characters in the input string. (This kind of action is common in
   storing records, using a fixed number of characters from someone's
   name). It is nice if your function works on strings that are
   shorter than five characters in length: it should just return the
   entire input string.

   Once you have defined the function, it should behave as in the
   following example:

   .. sourcecode:: python

       >>> truncString('henrietta')
       'henri'
       >>> truncString('vladimir')
        'vladi'
       >>> truncString("a man a plan a canal - panama!")
       'a man'

   .. actex:: ch03_3


#. Define a function ``spliceLists`` that takes two lists and a
   number as its inputs. The number should be a value that is greater
   than or equal to zero, and less than or equal to the length of the
   shortest list. Your function should slice the first list from the
   beginning to the input number, and should slice the second list
   from the input number to the end, and then should concatenate the
   results. See the sample calls below:

   .. sourcecode:: python

       >>> spliceLists([1, 2, 3, 4, 5, 6, 7, [100, 90, 80, 70, 60, 50,
       40], 4) [1, 2, 3, 4, 60, 50, 40]
       >>> spliceLists([1, 2, 3], [9, 8,7, 6, 5], 1) [1, 8, 7, 6, 5]
       >>> spliceLists(['a', 'b', 'c'], ['d','e'], 0) ['d', 'e']
       >>> spliceLists(['a', 'b', 'c'], ['d', 'e'], 2)['a', 'b']

   .. actex:: ch03_4

Loop!
-----

There are two kinds of loops we will use commonly in Python:
``while`` and ``for``. The ``while`` loop takes a boolean expression, an
expression that asks a question, and then has a block of indented
Python statements. It tests the expression, and so long as it
evaluates to true, Python will execute the statements in the block,
and repeat. A ``for`` loop repeats for a fixed number of times. Each
time through it sets its loop variable to be the next value in the
loop sequence. Look at the examples and questions below.


#. Look at the following loops. For each one, figure out what it
   does. After you work through it by hand, put it into Python in the
   shell and see what it does for certain.

   .. sourcecode:: python

        # loop 1
        x = 32
        while x > 0:
            print x
            x = x / 2
        print x


        # loop 2
        for i in range(10):
           print i, i ** 2


        # loop 3
         i = 0
         while i < 10:
            print i, i ** 2

        # loop 4
         for c in 'razzamatazz':
            print c.upper()

   .. activecode:: ch03_5

    # loop 1
    x = 32
    while x > 0:
        print x
        x = x / 2
    print x


    # loop 2
    for i in range(10):
       print i, i ** 2


    # loop 3
     i = 0
     while i < 10:
        print i, i ** 2

    # loop 4
     for c in 'razzamatazz':
        print c.upper()


#. Create a loop, using either ``while`` or ``for`` that prints the
   even numbers from 1 to 10. Then use that as a model to create a
   function called ``evensToN`` that takes a single number, ``n``, as
   input, and prints the even numbers from 1 to ``n``.

   .. actex:: ch03_6

#. Create a function that takes two numbers as input. Within, use a
   ``while`` loop that repeats until the first number is greater than
   the second number. Each time through the loop, print the numbers,
   then add one to the first number, and subtract one from the second
   number.

   .. actex:: ch03_7

Myro
====

Get your hands on a robot, and try out these exercises in writing
functions.


#. Look at the following function. Try to figure out what it will
   do, then try it out to check yourself.

   .. sourcecode:: python

       def dance(speed):
          beep()
          turnRight(speed, 1)
          beep()
          turnLeft(speed,2)
          beep()
          turnRight(speed, 2)
          beep()
          turnLeft(1)
          beep()
          beep()
          beep()
          stop()

   .. actex:: ch03_8

#. Implement a ``yoyo`` function that makes the robot move forward
   and then back twice. It should take two inputs, the speed for the
   robot and how long to wait before returning.

   .. actex:: ch03_9

#. Create a function ``moveAndPic`` that takes in a turn time as its
   input. It should cause the robot to take a picture, show the
   picture, and then turn left for the input turn time. It should
   repeat this process four times (you don't have to use a loop here,
   but you may if you've already figured them out).

   .. actex:: ch03_10

#. Create a function, ``driveSquare`` that tries to have the robot
   move in a square. It should take a speed value as its input. Note
   that Real Robots Don't Drive Straight, so be forgiving!

  .. actex:: ch03_11

Loops
-----

Reading the Loops section above for information about the basic
structure of ``while`` and ``for`` loops. Then try the following:


#. Modify the ``moveAndPic`` function from earlier so it also takes
   in a number ``n``, and uses a loop to repeat the turning and taking
   pictures ``n`` times, instead of 4 times.

   .. actex:: ch03_12

#. Using the ``yoyo`` and ``dance`` functions from before, create a
   function called ``danceRoutine`` that repeats some combination of
   yoyo-ing and dancing some number of times.

   .. actex:: ch03_13

